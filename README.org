#+ATTR_HTML: :style margin-left: auto; margin-right: auto;[[./img/WEmacs.png]]
* Will's Emacs (WEmacs)
This file contains all the packages used in my emacs configuration in a nice and neat manner in order to prevent against Emacs bankruptcy.
* General
Some general changes to improve QOL using Emacs for me. Usually just modified values that are already built into Emacs.
** Remove tool bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** Remove menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
** Remove scroll bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
** Show matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Move by camelCase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Window split and follow
Why oh why does Emacs not switch to the new split window by default? I thank Uncle Dave for this fix:
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Scroll convservatively
Makes it so the screen doesn't jump when I scroll past the bottom of the view
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Turn off annoying bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Yes or no means y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Electric pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Remove auto-saving
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Show line and column number
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
  (setq-default display-line-numbers 'relative)
#+END_SRC
** Remove startup message
This will make way to use dashboard
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Better copy paste
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
* Help
Packages and configs that help me with Emacs
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
** General
#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t
      :config
      (general-create-definer my-general-def
	:prefix "SPC"
	:keymaps 'override
	:states '(normal visual emacs))
      ;; Easy shortcuts
      (my-general-def
	;; Windows
	"w" '(:ignore t :which-key "Windows")
	"wm" 'delete-other-windows
	"wd" 'delete-window
	"w/" 'split-and-follow-vertically
	"w-" 'split-and-follow-horizontally

	;; Fun
	"$" '(:ignore t :which-key "Fun")

	;; Files
	"f" '(:ignore t :which-key "Files")

	;; Buffers
	"b" '(:ignore t :which-key "Buffers")
	"bd" 'kill-this-buffer

	;; Applications
	"a" '(:ignore t :which-key "Applications")
	"ad" 'dired))
#+END_SRC
** Flycheck
*** Base
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
*** Inline
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-inline
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
#+END_SRC
* Theme and modeline
** Zero-dark theme
A theme that is aesthetically pleasing
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :init
    (load-theme 'zerodark t))
#+END_SRC
** All the icons
Make sure to run M-x all-the-icons-install-fonts
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** Doom modeline
A modeline that is aesthetically pleasing
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
        :ensure t
        :hook (after-init . doom-modeline-mode))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
      (setq dashboard-items '((recents  . 8)
			      (projects . 8)))
      (setq dashboard-set-footer nil)
      (setq dashboard-startup-banner "~/.emacs.d/img/WEmacs.png")
      (setq dashboard-banner-logo-title "")
      (setq dashboard-set-init-info nil)
      (dashboard-setup-startup-hook))
#+END_SRC
* Terminal
** Set default terminal to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Add shortcut to open ansi-term
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** Remove line numbers for terminals and shells
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda () (setq-local display-line-numbers nil)))
  (add-hook 'term-mode-hook (lambda () (setq-local display-line-numbers nil)))
#+END_SRC
** Allow reverse search for C-r
#+BEGIN_SRC emacs-lisp
  (defun my/setup-term-mode ()
    (evil-local-set-key 'insert (kbd "C-r") 'my/send-C-r))

  (defun my/send-C-r ()
    (interactive)
    (term-send-raw-string "\C-r"))

  (add-hook 'term-mode-hook 'my/setup-term-mode)
#+END_SRC
** Swap term mode
#+BEGIN_SRC emacs-lisp
  (defun my/swap-term-mode ()
    "Toggle between line and char mode."
    (interactive)
    (if (term-in-line-mode)
	(term-char-mode)
      (term-line-mode)))

  (my-general-def
    "'" '(my/swap-term-mode :which-key "swap-term-mode"))
#+END_SRC
* Org
Any configs and packages relating to Org-mode
** Add elisp src snippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Toggle word wrap
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'toggle-truncate-lines)
#+END_SRC
** Turn off company
#+BEGIN_SRC emacs-lisp
  (defun my/turn-off-company ()
    (company-mode -1))

  (add-hook 'org-mode-hook #'my/turn-off-company)
#+END_SRC
* Text manipulation and navigation
** Evil
Vim keybindings are just too good
*** Import base
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init (setq evil-want-keybinding nil)
    :config (evil-mode))
#+END_SRC
*** Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC
*** Commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
      :config
      (evil-commentary-mode))
#+END_SRC
*** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
    :config
    (global-evil-mc-mode 1))

  (evil-define-key 'visual evil-mc-key-map
    "A" #'evil-mc-make-cursor-in-visual-selection-end
    "I" #'evil-mc-make-cursor-in-visual-selection-beg)
#+END_SRC
*** Multi-edit
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit
    :config
    (evil-multiedit-default-keybinds))
#+END_SRC
** Windmove
Allows easy transition between windows using Shift+Arrows.
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :config
    (windmove-default-keybindings))
#+END_SRC
*** Make windmove work in Org-Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-background t)
    (my-general-def
      "SPC" 'avy-goto-char))
#+END_SRC
** Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :config
    (my-general-def
      "ww" 'ace-window))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (progn
      (global-company-mode)
      (setq company-tooltip-limit 10)
      (setq company-dabbrev-downcase 0)
      (setq company-idle-delay 0)
      (setq company-echo-delay 0)
      (setq company-minimum-prefix-length 2)
      (setq company-require-match nil)
      (setq company-selection-wrap-around t)
      (setq company-tooltip-align-annotations t)
      (setq company-transformers '(company-sort-by-occurrence))
      (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "S-TAB") 'company-select-previous)))
#+END_SRC
** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-reload-all)
    (yas-global-mode 1))
  (use-package helm-c-yasnippet
    :config
    (setq helm-yas-space-match-any-greedy t)
    (yas-global-mode 1)
    (yas-load-directory "~/.emacs.d/snippets/"))
#+END_SRC
* Version control and projects
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (my-general-def
      "g" '(:ignore t :which-key "Git")
      "gs" 'magit-status 
      "gp" 'magit-pull-from-upstream)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
      :config
      (progn
	(my-general-def
	  "p" '(projectile-command-map :which-key "Projectile"))
	(projectile-mode +1)))
#+END_SRC
** Helm
*** Import base
#+BEGIN_SRC emacs-lisp
  (use-package helm
      :diminish helm-mode
      :init
	  (progn
	      (require 'helm-config)
	      (setq helm-candidate-number-limit 100)
	      (setq helm-idle-delay 0.0
		  helm-input-idle-delay 0.01
		  helm-yas-display-key-on-candidate t
		  helm-quick-update t
		  helm-M-x-requires-pattern nil
		  helm-ff-skip-boring-files t)
		  (helm-mode))
      :bind
	  (("C-h a" . helm-apropos)
	  ("M-y" . helm-show-kill-ring)
	  ("M-x" . helm-M-x)
	  ("C-x c o" . helm-occur)
	  ("C-x c s" . helm-swoop)
	  ("C-x c y" . helm-yas-complete)
	  ("C-x c Y" . helm-yas-create-snippet-on-region)
	  ("C-x c SPC" . helm-all-mark-rings))
      :config
	  (my-general-def
	    "bb" 'helm-mini
	    "bl" 'helm-buffers-list
	    "ff" 'helm-find-files))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :config
    (my-general-def
      "pp" 'helm-projectile-switch-project
      "pf" 'helm-projectile-find-file
      "pF" 'helm-projectile-find-file-in-known-projects
      "pg" 'helm-projectile-find-file-dwim
      "pd" 'helm-projectile-find-dir
      "pe" 'helm-projectile-recentf
      "pb" 'helm-projectile-switch-to-buffer
      "psg" 'helm-projectile-grep
      "psr" 'helm-projectile-rg
      "psa" 'helm-projectile-ag)
    (helm-projectile-on))
#+END_SRC
*** Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package helm-rg)
#+END_SRC
** Treemacs
Replacement for Neotree
*** Import base
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
    (my-general-def
      "pt" #'treemacs))
#+END_SRC
*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-magit
    :after treemacs magit)
#+END_SRC
* Fun
** Fireplace
#+BEGIN_SRC emacs-lisp
  (use-package fireplace
    :config
    (my-general-def
      "$f" 'fireplace))
#+END_SRC
* Convenience
Functions and bindings that make Emacs easier to use for me
** Save and reload init.el
#+BEGIN_SRC emacs-lisp
  (defun my/reloadinit ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (my-general-def
    "fer" '(my/reloadinit :which-key "reload init.el"))
#+END_SRC
** Save current buffer(s)
#+BEGIN_SRC emacs-lisp
  (my-general-def
    "fs" 'save-buffer
    "fS" 'save-some-buffers)
#+END_SRC
** Open init.el and README.org
#+BEGIN_SRC emacs-lisp
  (defun my/goto-initel ()
    (interactive)
    (find-file "~/.emacs.d/init.el"))

  (defun my/goto-configorg ()
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (defun my/open-both ()
    (interactive)
    (delete-other-windows)
    (my/goto-initel)
    (split-and-follow-vertically)
    (my/goto-configorg))

  (my-general-def
    "fed" '(my/goto-initel :which-key "init.el")
    "fec" '(my/goto-configorg :which-key "README.org")
    "feb" '(my/open-both :which-key "open both"))
#+END_SRC
** Switch to most recent buffer
#+BEGIN_SRC emacs-lisp
  (defun my/switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (my-general-def
    "TAB" '(my/switch-to-last-buffer :which-key "previous buffer"))
#+END_SRC
** Easy search in current project
#+BEGIN_SRC emacs-lisp
  (my-general-def
    "p/" #'helm-projectile-rg)
#+END_SRC
** Easy search in current file
#+BEGIN_SRC emacs-lisp
  (my-general-def
    "/" #'helm-occur)
#+END_SRC
** Open ansi-term in project root
#+BEGIN_SRC emacs-lisp
  (defun projectile-term ()
    "Create an ansi-term at the project root"
    (interactive)
    (let ((buff-name (concat "ansi-term" (projectile-project-root))))
      (if (get-buffer buff-name)
	(switch-to-buffer-other-window buff-name)
	(progn
	  (split-window-sensibly (selected-window))
	  (other-window 1)
	  (setq default-directory (projectile-project-root))
	  (ansi-term (getenv "SHELL"))
	  (rename-buffer buff-name t)))))

  (my-general-def
    "p'" #'projectile-term)
#+END_SRC
** Calc
#+BEGIN_SRC emacs-lisp
  (my-general-def
    "ac" '(:ignore t :which-key "Calc")
    "acq" #'quick-calc
    "ack" #'calc-keypad
    "acc" #'calc
    "acb" #'full-calc
    "ace" #'calc-embedded
    "acw" #'calc-embedded-word)
#+END_SRC
* Languages
Packages for specific languages
** React/JS
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :init (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode)))
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :init (progn
	    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))))
#+END_SRC
** Groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
      :init (add-to-list 'auto-mode-alist '("\\.gradle\\'" . groovy-mode)))
#+END_SRC
** Rust
*** Base mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)
#+END_SRC
*** Racer
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :init
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    :config
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common))
#+END_SRC
*** Flycheck rust
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
*** Cargo
#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :init
    (add-hook 'rust-mode-hook 'cargo-minor-mode))
#+END_SRC
** Lisp
*** Slime Company
#+BEGIN_SRC emacs-lisp
  (use-package slime-company
    :config
    (add-hook 'slime-mode-hook
	      (lambda ()
		(push '(company-slime) company-backends))))
#+END_SRC
*** Slime
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :config
    (progn
      (setq inferior-lisp-program "/usr/bin/sbcl")
      (slime-setup '(slime-company))))
#+END_SRC
* Tools
Special packages that I use alongside other modes
** RestClient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :config
    (my-general-def
      "ar" 'restclient-mode))
#+END_SRC
** Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :init
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook  'emmet-mode)
    (add-hook 'rjsx-mode-hook  'emmet-mode))
#+END_SRC
