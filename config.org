* General
Some general changes to improve QOL using Emacs for me. Usually just modified values that are already built into Emacs.
** Remove tool bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** Remove menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
** Remove scroll bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
** Show matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Move by camelCase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Window split and follow
Why oh why does Emacs not switch to the new split window by default? I thank Uncle Dave for this fix:
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Scroll convservatively
Makes it so the screen doesn't jump when I scroll past the bottom of the view
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Turn off annoying bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Yes or no means y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Electric pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Remove auto-saving
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Show line and column number
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
  (setq-default display-line-numbers 'relative)
#+END_SRC
* Theme and modeline
** Zero-dark theme
A theme that is aesthetically pleasing
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :init
    (load-theme 'zerodark t))
#+END_SRC
** All the icons
Make sure to run M-x all-the-icons-install-fonts
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** Doom modeline
A modeline that is aesthetically pleasing
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
        :ensure t
        :hook (after-init . doom-modeline-mode))
#+END_SRC
* Terminal
** Set default terminal to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Add shortcut to open ansi-term
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** Remove line numbers for terminals and shells
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda () (setq-local display-line-numbers nil)))
  (add-hook 'term-mode-hook (lambda () (setq-local display-line-numbers nil)))
#+END_SRC
* Help
Packages and configs that help me with Emacs
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+END_SRC
** General
#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t
      :config
      (general-create-definer my-general-def
	:prefix "SPC"
	:states '(normal visual emacs))
      (my-general-def
	  ;; Applications
	  "a" '(:ignore t :which-key "Applications")
	  "ad" 'dired))
#+END_SRC
* Org
Any configs and packages relating to Org-mode
** Add elisp src snippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Text manipulation and navigation
** Evil
Vim keybindings are just too good
*** Import package
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config (evil-mode))
#+END_SRC
** Windmove
Allows easy transition between windows using Shift+Arrows.
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :config
    (windmove-default-keybindings))
#+END_SRC
*** Make windmove work in Org-Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-background t)
    (my-general-def
      "SPC" 'avy-goto-char))
#+END_SRC
* Version control and projects
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (my-general-def
      "g" '(:ignore t :which-key "Git")
      "gs" 'magit-status 
      "gp" 'magit-pull-from-upstream))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
      :config
      (my-general-def
	  "p" '(projectile-command-map :ignore t :which-key "Projectile")))
#+END_SRC
